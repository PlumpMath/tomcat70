<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
  <!ENTITY defaultpolicy SYSTEM "../../conf/catalina.policy">
]>
<document url="security-manager-howto.html">
    &project;
    <properties>
        <author email="glenn@voyager.apg.more.net">Glenn Nielsen</author>
        <author email="jeanfrancois.arcand@sun.com">Jean-Francois Arcand</author>
        <title>Security Manager HOW-TO</title>
    </properties>
<body>
<section name="Table of Contents">
<toc/>
</section>
<section name="Background">
  <p>자바의 <strong>보안 관리자 </strong>를 웹 브라우저에게 허용하는 것입니다
   신뢰할 수없는 코드를 방지하기 위해 자신의 샌드 박스에서 애플릿을 실행하려면
   다른 호스트에 연결, 로컬 파일 시스템에있는 파일에 액세스
  하나 이상의 애플릿 등등에서 로드되었습니다.  같은 방법으로
  보안 관리자는에서 실행되는 신뢰할 수 없는 애플릿으로부터 보호
   Tomcat이 보호 할 수 있습니다 실행하는 동안 브라우저는 보안 관리자의 사용
   트로이 서블릿, JSP를, JSP 콩 및 태그 라이브러리에서 서버.
   또는 부주의 한 실수입니다.</p>
  <p>귀하의 사이트에 JSP를 게시 할 수있는 권한이 누군가가 실수로 JSP에 다음을 포함하는 경우 상상해보십시오.</p>
<source>
&lt;% System.exit(1); %&gt;
</source>
  <p>이 JSP가 톰캣에 의해 실행 된 때마다, Tomcat이 종료됩니다.
   자바 보안 관리자를 사용하면 방어의 또 하나의 라인입니다
   시스템 관리자가 서버의 보안 성과 안정성을 유지하는 데 사용할 수 있습니다..</p>
  <p><strong>경고</strong> -보안 감사
  톰캣 코드베이스를 사용하여 실시되었다. 중요한 패키지의 대부분은 보호되어 있고 
  새로운 보안 패키지 보호 메커니즘이 구현되었습니다.
 그래도, 당신이 신뢰할 수없는 사용자가 웹 어플리케이션, JSP, 서블릿, 빈, 태그 라이브러리를 
 게시 할 수 있도록 허용하기 전에 보안 관리자 환경 설정에 만족하는지 확인하십시오. 
 <strong>그러나 보안 관리자로 실행하는 것은 확실히 하나없이 실행보다 낫습니다.</strong></p>
</section>
<section name="Permissions">
  <p>권한 클래스는 Tomcat이로드 할 클래스의 권한을 정의하는 데 사용됩니다.
 이 JDK의 표준 권한 클래스들이있습니다, 당신은 당신의 자신의 웹 응용 프로그램에
 사용하기 위해 자신의 권한 클래스를 만들 수 있습니다.두 기술은 톰캣에 사용됩니다..</p>
  <subsection name="Standard Permissions">
    <p>이것은 Tomcat에 적용 할 수있는 표준 시스템 보안 관리자 권한 클래스들의 간단한 요약입니다.
   보십시요
    <a href="http://java.sun.com/security/">http://java.sun.com/security/</a>
    for more information.</p>
    <ul>
    <li><strong>java.util.PropertyPermission</strong> - Controls read/write
        access to JVM properties such as <code>java.home</code>.</li>
    <li><strong>java.lang.RuntimePermission</strong> - Controls use of
        some System/Runtime functions like <code>exit()</code> and
        <code>exec()</code>. Also control the package access/definition.</li>
    <li><strong>java.io.FilePermission</strong> - Controls read/write/execute
        access to files and directories.</li>
    <li><strong>java.net.SocketPermission</strong> - Controls use of
        network sockets.</li>
    <li><strong>java.net.NetPermission</strong> - Controls use of
        multicast network connections.</li>
    <li><strong>java.lang.reflect.ReflectPermission</strong> - Controls
        use of reflection to do class introspection.</li>
    <li><strong>java.security.SecurityPermission</strong> - Controls access
        to Security methods.</li>
    <li><strong>java.security.AllPermission</strong> - Allows access to all
        permissions, just as if you were running Tomcat without a
        SecurityManager.</li>
    </ul>
  </subsection>
  <subsection name="Tomcat Custom Permissions">
    <p>tomcat은 다음과 같은 사용자 지정 권한 클래스를 사용합니다
    <strong>org.apache.naming.JndiPermission</strong>.  
    이 권한은 JNDI라는 이름의 파일 기반 리소스에 대한 읽기 액세스를 제어합니다. 
    권한 부여 이름은 JNDI 이름에 아무런 조치가 없습니다. 
    "*"가 따라 붙으면 권한을 부여 할 때 JNDI라는 이름의 파일 리소스 와일드 카드
    매칭을 수행하는 데 사용할 수 있습니다.  또는 예를 들어, 당신은 당신의 정책 파일에 다음을 포함 할 수 있습니다:</p>
<source>
permission  org.apache.naming.JndiPermission  "jndi://localhost/examples/*";
</source>
    <p>이와 같은 권한 항목이 그것의 자신의 정적 리소스를 읽을 수 있지만 다른 파일 (해당 파일에 대한 권한을
    명시 적으로 부여되지 않는)를 읽어 파일 액세스를 사용을 거부 할 수 있도록 배포되는 각 웹 응용 프로그램에 
    대해 동적으로 생성됩니다.</p>
    <p>또한, Tomcat은 항상 동적으로 다음과 같은 파일 권한을 만듭니다</p>
<source>
permission java.io.FilePermission "** your application context**", "read";
permission java.io.FilePermission
  "** application working directory**", "read,write";
permission java.io.FilePermission
  "** application working directory**/-", "read,write,delete";
</source>
    <p>여기서 응용 프로그램 컨텍스트를 ** ** 응용 프로그램을 배포하고 서블릿 스펙에서 요구하는대로 
    ** 응용 프로그램을 작업 디렉토리를 * 임시 디렉토리가 응용 프로그램에 제공되는 폴더 (또는 WAR 파일)에 해당됩니다.</p>
  </subsection>
</section>
<section name="Configuring Tomcat With A SecurityManager">
  <h3>정책 파일 형식</h3>
  <p>자바 보안 관리자에 의해 구현되는 보안 정책은
  <code> $CATALINA_BASE/catalina.policy/conf</code>의 파일에서 구성 할 수 있습니다.
  이 파일은 완전히 <code>java.policy</code>이 파일의 존재를 대체합니다.
  귀하의 JDK 시스템 디렉토리합니다.  이 <code>catalina.policy</code> 파일
  손으로 편집 할 수 있습니다, ​​또는 당신은 다음를 사용할 수 있습니다.
  <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/PolicyGuide.html">policytool</a>
  application that comes with Java 1.2 or later.</p>
  <p>Entries in the <code>catalina.policy</code>이 파일이 기준이됩니다.
  <code>java.policy</code> 파일 형식은 다음과 같이:</p>
<source>
// 예를 들어 정책 파일 항목
grant [signedBy &lt;signer&gt;,] [codeBase &lt;code source&gt;] {
  permission  &lt;class&gt;  [&lt;name&gt; [, &lt;action list&gt;]];
};
</source>
  <p>권한을 부여 할 때, <strong>서명자</strong>와 <strong>코드베이스</strong> 항목은 선택 사항입니다.  
  주석 행은 "//"를 현재 줄의 끝에서 끝으로 시작합니다.<code> 코드베이스 </code>를이 URL의 형태이며,
  파일의 URL은 <code> ${java.home} </code>를 하고 <code>${catalina.home}</code>
  를 사용할 수 있습니다에 대한 코드 속성 (<code>JAVA_HOME</code>를, <code>CATALINA_HOME</code>를하고
  <code>CATALINA_BASE</code>를 환경 변수들을 위해 정의된 디렉토리 경로에 밖으로 확장되는).</p> 
  <h3>기본 정책 파일</h3>
  <p>기본 <code>$CATALINA_BASE/catalina.policy/conf</code> 파일은 다음과 같습니다.</p>
<!-- The following pulls in the conf/catalina.policy file when the
 documentation is built -->
<source>&defaultpolicy;</source>
  <h3>Tomcat 보안 관리자로 시작</h3>
  <p>일단 당신이 <code> catalina.policy </code>를 보안 관리자와 함께 사용하기위한
  파일을 설정 한 톰캣은 "보안"옵션을 사용하여 장소에서 보안 관리자와 함께 시작할 수 있습니다 :</p>
<source>
$CATALINA_HOME/bin/catalina.sh start -security    (Unix)
%CATALINA_HOME%\bin\catalina start -security      (Windows)
</source>
</section>
<section name="Configuring Package Protection in Tomcat">
  <p>톰캣 5로 시작, 그것은 against 패키지 정의 및 액세스를 보호하는 톰캣 내부 패키지를 구성하는 것이 가능합니다. See
  <a href="http://java.sun.com/security/seccodeguide.html">
    http://java.sun.com/security/seccodeguide.html</a>
    for more information.</p>
  <p><strong>경고</strong>: 기본 패키지 보호를 제거하면 아마 보안 구멍을 열 수 있다는 점에 유의하십시오</p>
  <h3>기본 등록 정보 파일</h3>
  <p>The default <code>$CATALINA_BASE/conf/catalina.properties</code> 파일은 다음과 같습니다 :</p>
<source>
## List of comma-separated packages that start with or equal this string
# will cause a security exception to be thrown when
# passed to checkPackageAccess unless the
# corresponding RuntimePermission ("accessClassInPackage."+package) has
# been granted.
package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.tomcat.,
org.apache.jasper.
## List of comma-separated packages that start with or equal this string
# will cause a security exception to be thrown when
# passed to checkPackageDefinition unless the
# corresponding RuntimePermission ("defineClassInPackage."+package) has
# been granted.
## by default, no packages are restricted for definition, and none of
# the class loaders supplied with the JDK call checkPackageDefinition.
#package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,
org.apache.tomcat.,org.apache.jasper.
</source>
  <p>Once you have configured the <code>catalina.properties</code> file for use
  with a SecurityManager, remember to re-start Tomcat.</p>
</section>
<section name="Troubleshooting">
  <p>웹 응용 프로그램에 필요한 권한의 부족에 의해 금지되어 조작을 실행하려고하면, 
  그것은 <code>AccessControLException</code>를 또는 <code>SecurityException</code>가 발생합니다.
  보안 관리자가 위반을 감지 할 때. 누락 된 권한을 디버깅하는 것은 도전적이고, 실행 중에 만들어진 
  모든 보안 결정 사항의 디버그 출력을 설정하는 것입니다 수 있습니다. 이것은 Tomcat을 시작하기 전에 
  시스템 속성을 설정하여 수행됩니다. 이 작업을 수행하는 가장 쉬운 방법은
  <code>CATALINA_OPTS</code> 환경 변수를 통해서 입니다. 이 명령을 실행합니다 :</p>
<source>
export CATALINA_OPTS=-Djava.security.debug=all    (Unix)
set CATALINA_OPTS=-Djava.security.debug=all       (Windows)
</source>
  <p>tomcat을 시작하기 전에</p>
  <p><strong>경고</strong> - 이것은 <em>many megabytes</em>을 생성하고 출력합니다!
  그러나, 당신이 "실패"라는 단어를 검색하고 검사하는 한 권한을 확인하여 문제를 추적 할 수 있습니다.
  당신은뿐만 아니라 여기에 지정할 수있는 추가 옵션에 대한 Java 보안 설명서를 참조하십시오.</p>
</section>
</body>
</document>
